import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';

// React component
// Returns a view of Square Component taking in a param named value, from Board Component
//class Square extends React.Component {
//  render() {
//    return (
//      <button className="square" onClick={() => this.props.onClick()}>
//      	{this.props.value}
//      </button>
//    );
//  }
//}

// This is a functional component, which is simpler to write.  It is used when 
// component types only consist of a render method.  Don't need to define a class
// extending React.Component, just write a function that takes props and returns
// what should be rendered.
function Square(props) {
	return (
		<button className="square" onClick={props.onClick}>
			{props.value}
		</button>
	);
}

// React component
// The renderSquare(i) returns a descr. of component Square, which sets value={i}
// In the Square class, in the render method, it returns with {this.props.value},
// where props is the param it takes in, and value is the name of the param from Board
class Board extends React.Component {
  constructor() {
	  super();
	  this.state = {
		  squares: Array(9).fill(null),
		  xIsNext: true,
	  };
  }	
  
  handleClick(i) {
	  const squares = this.state.squares.slice();
	  
	  if (calculateWinner(squares) || squares[i]) {
		  return;
	  }
	  
	  squares[i] = this.state.xIsNext ? 'X' : 'O';
	  this.setState({
		  squares: squares,
		  xIsNext: !this.state.xIsNext,
	  });
  }
	
  renderSquare(i) {
	    return (
	      <Square 
	        value={this.state.squares[i]}
	        onClick={() => this.handleClick(i)}
	      />
	    );
	  }

  render() {
	const winner = calculateWinner(this.state.squares);
	let status;
	if (winner) {
		status = 'Winner: ' + winner;
	} else {
		status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');
	}

    return (
      <div>
        <div className="status">{status}</div>
        <div className="board-row">
          {this.renderSquare(0)}
          {this.renderSquare(1)}
          {this.renderSquare(2)}
        </div>
        <div className="board-row">
          {this.renderSquare(3)}
          {this.renderSquare(4)}
          {this.renderSquare(5)}
        </div>
        <div className="board-row">
          {this.renderSquare(6)}
          {this.renderSquare(7)}
          {this.renderSquare(8)}
        </div>
      </div>
    );
  }
}

// React component
class Game extends React.Component {
  render() {
    return (
      <div className="game">
        <div className="game-board">
          <Board />
        </div>
        <div className="game-info">
          <div>{/* status */}</div>
          <ol>{/* TODO */}</ol>
        </div>
      </div>
    );
  }
}

// functional component to determine winner
function calculateWinner(squares) {
	// all the winning lines
	const lines = [
		[0, 1, 2],
		[3, 4, 5],
		[6, 7, 8],
		[0, 3, 6],
		[1, 4, 7],
		[2, 5, 8],
		[0, 4, 8],
		[2, 4, 6],
	];
	
	// check through all possibilities of winning lines
	for(let i =0; i < lines.length; i++) {
		// let constant variable = a winning line
		const[a, b, c] = lines[i];
		// check to see if squares a, b, and c are the same, if so, return the
		// letter that won, either X or O
		if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
			return squares[a];
		}
	}
	return null;
}

// ========================================

ReactDOM.render(
  <Game />,
  document.getElementById('root')
);
